# -*- coding: utf-8 -*-
"""Liver Cirroshis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHGGjF4ZdAHoUatf5JYceL80MZF1ReVt
"""

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
data = pd.read_csv('indian_liver_patient.csv')  # Update with your dataset filename

# Data preprocessing
# Handle missing values
data.dropna(inplace=True)

# Encode categorical variable 'Gender'
data = pd.get_dummies(data, columns=['Gender'])

# Feature selection
selected_features = ['Age', 'Gender_Female', 'Gender_Male', 'Total_Bilirubin',
                     'Direct_Bilirubin', 'Alkaline_Phosphotase', 'Alamine_Aminotransferase',
                     'Aspartate_Aminotransferase', 'Total_Protiens', 'Albumin',
                     'Albumin_and_Globulin_Ratio']

X = data[selected_features]
y = data['Dataset']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model selection: Random Forest
rf_model = RandomForestClassifier(random_state=42)

# Hyperparameter tuning using GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}
grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, n_jobs=-1)
grid_search.fit(X_train, y_train)

# Best parameters and best score
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Predictions using the best estimator from GridSearchCV
best_rf_model = grid_search.best_estimator_
y_pred = best_rf_model.predict(X_test)

# Model evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Calculate accuracy in percentage
accuracy = accuracy_score(y_test, y_pred)
accuracy_percentage = accuracy * 100
print("Accuracy:", accuracy_percentage, "%")

# Display classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))