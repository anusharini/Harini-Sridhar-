# -*- coding: utf-8 -*-
"""Prediction_and_recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rlxI3j4lwTy8WPisIcILHjz4n4b5srfx
"""

import pandas as pd

# Load the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, names=columns)

# Display the first few rows
data.head()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Separate features and target variable
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score

# Train a RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'ROC-AUC: {roc_auc:.2f}')

# Define basic treatment recommendations based on prediction
def recommend_treatment(prediction):
    if prediction == 1:
        return "Recommended Treatment: Consult a healthcare provider for diabetes management plan."
    else:
        return "Recommended Treatment: Maintain a healthy lifestyle to prevent diabetes."

# Example usage
for i in range(5):
    print(f'Prediction: {y_pred[i]}, {recommend_treatment(y_pred[i])}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score

# Load the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, names=columns)

# Separate features and target variable
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'ROC-AUC: {roc_auc:.2f}')

# Define detailed treatment recommendations based on prediction and input features
def recommend_treatment(prediction, features):
    glucose = features[1]
    bmi = features[5]

    if prediction == 1:
        if glucose > 180:
            return "Diagnosis: Diabetes. Recommended Treatment: Immediate consultation with a healthcare provider. Consider starting insulin therapy."
        elif bmi > 30:
            return "Diagnosis: Diabetes. Recommended Treatment: Consult a healthcare provider. Focus on a weight management plan along with medication."
        else:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular monitoring of blood sugar levels and oral medications."
    else:
        if bmi > 30:
            return "Diagnosis: No Diabetes. Recommended Treatment: Maintain a healthy diet and regular exercise to manage weight and prevent diabetes."
        else:
            return "Diagnosis: No Diabetes. Recommended Treatment: Continue with a balanced diet and regular physical activity to stay healthy."

# Example usage with detailed recommendations
for i in range(5):
    features = X_test[i]
    prediction = y_pred[i]
    print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score

# Load the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, names=columns)

# Separate features and target variable
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'ROC-AUC: {roc_auc:.2f}')

# Define detailed treatment recommendations based on prediction and input features
def recommend_treatment(prediction, features):
    glucose = features[1]
    bmi = features[5]
    age = features[7]
    blood_pressure = features[2]

    if prediction == 1:
        if glucose > 180:
            return "Diagnosis: Diabetes. Recommended Treatment: Immediate consultation with a healthcare provider. Consider starting insulin therapy."
        elif bmi > 30:
            return "Diagnosis: Diabetes. Recommended Treatment: Consult a healthcare provider. Focus on a weight management plan along with medication."
        elif age > 50:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular check-ups and possibly medication tailored for older adults."
        elif blood_pressure > 80:
            return "Diagnosis: Diabetes. Recommended Treatment: Monitor blood pressure and consider medication to manage both diabetes and hypertension."
        else:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular monitoring of blood sugar levels and oral medications."
    else:
        if bmi > 30:
            return "Diagnosis: No Diabetes. Recommended Treatment: Maintain a healthy diet and regular exercise to manage weight and prevent diabetes."
        elif age > 50:
            return "Diagnosis: No Diabetes. Recommended Treatment: Regular check-ups to monitor and prevent the onset of diabetes."
        elif blood_pressure > 80:
            return "Diagnosis: No Diabetes. Recommended Treatment: Monitor blood pressure and maintain a healthy lifestyle to prevent diabetes."
        else:
            return "Diagnosis: No Diabetes. Recommended Treatment: Continue with a balanced diet and regular physical activity to stay healthy."

# Example usage with detailed recommendations
for i in range(5):
    features = X_test[i]
    prediction = y_pred[i]
    print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}')

# Define detailed treatment recommendations based on prediction and input features
def recommend_treatment(prediction, features):
    pregnancies = features[0]
    glucose = features[1]
    blood_pressure = features[2]
    skin_thickness = features[3]
    insulin = features[4]
    bmi = features[5]
    diabetes_pedigree_function = features[6]
    age = features[7]

    if prediction == 1:
        if glucose > 180:
            return "Diagnosis: Diabetes. Recommended Treatment: Immediate consultation with a healthcare provider. Consider starting insulin therapy."
        elif bmi > 30:
            return "Diagnosis: Diabetes. Recommended Treatment: Consult a healthcare provider. Focus on a weight management plan along with medication."
        elif age > 50:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular check-ups and possibly medication tailored for older adults."
        elif blood_pressure > 80:
            return "Diagnosis: Diabetes. Recommended Treatment: Monitor blood pressure and consider medication to manage both diabetes and hypertension."
        else:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular monitoring of blood sugar levels and oral medications."
    else:
        if bmi > 30:
            return "Diagnosis: No Diabetes. Recommended Treatment: Maintain a healthy diet and regular exercise to manage weight and prevent diabetes."
        elif age > 50:
            return "Diagnosis: No Diabetes. Recommended Treatment: Regular check-ups to monitor and prevent the onset of diabetes."
        elif blood_pressure > 80:
            return "Diagnosis: No Diabetes. Recommended Treatment: Monitor blood pressure and maintain a healthy lifestyle to prevent diabetes."
        else:
            return "Diagnosis: No Diabetes. Recommended Treatment: Continue with a balanced diet and regular physical activity to stay healthy."

# Example usage with detailed recommendations
for i in range(5):
    features = X_test[i]
    prediction = y_pred[i]
    print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}')

# Example usage with detailed recommendations
for i in range(5):
    features = X_test[i]
    prediction = y_pred[i]
    print(f'Features: {features}')
    print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}\n')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score

# Load the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, names=columns)

# Separate features and target variable
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Keep the original feature values for recommendation purposes
X_original = X.copy()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test, X_original_train, X_original_test = train_test_split(X, y, X_original, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'ROC-AUC: {roc_auc:.2f}')

# Define detailed treatment recommendations based on prediction and input features
def recommend_treatment(prediction, features):
    pregnancies = features[0]
    glucose = features[1]
    blood_pressure = features[2]
    skin_thickness = features[3]
    insulin = features[4]
    bmi = features[5]
    diabetes_pedigree_function = features[6]
    age = features[7]

    if prediction == 1:
        if glucose > 180:
            return "Diagnosis: Diabetes. Recommended Treatment: Immediate consultation with a healthcare provider. Consider starting insulin therapy."
        elif bmi > 30:
            return "Diagnosis: Diabetes. Recommended Treatment: Consult a healthcare provider. Focus on a weight management plan along with medication."
        elif age > 50:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular check-ups and possibly medication tailored for older adults."
        elif blood_pressure > 80:
            return "Diagnosis: Diabetes. Recommended Treatment: Monitor blood pressure and consider medication to manage both diabetes and hypertension."
        else:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular monitoring of blood sugar levels and oral medications."
    else:
        if bmi > 30:
            return "Diagnosis: No Diabetes. Recommended Treatment: Maintain a healthy diet and regular exercise to manage weight and prevent diabetes."
        elif age > 50:
            return "Diagnosis: No Diabetes. Recommended Treatment: Regular check-ups to monitor and prevent the onset of diabetes."
        elif blood_pressure > 80:
            return "Diagnosis: No Diabetes. Recommended Treatment: Monitor blood pressure and maintain a healthy lifestyle to prevent diabetes."
        else:
            return "Diagnosis: No Diabetes. Recommended Treatment: Continue with a balanced diet and regular physical activity to stay healthy."

# Example usage with detailed recommendations
for i in range(5):
    features = X_original_test.iloc[i].values  # Use original values for recommendation
    prediction = y_pred[i]
    print(f'Features: {features}')
    print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}\n')

import numpy as np

# Count the number of each prediction
unique, counts = np.unique(y_pred, return_counts=True)
prediction_counts = dict(zip(unique, counts))
print(f'Prediction distribution: {prediction_counts}')

# Example usage with detailed recommendations
has_diabetes_example = False
no_diabetes_example = False

for i in range(len(X_test)):
    features = X_original_test.iloc[i].values  # Use original values for recommendation
    prediction = y_pred[i]
    if prediction == 1 and not has_diabetes_example:
        print(f'Features: {features}')
        print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}\n')
        has_diabetes_example = True
    elif prediction == 0 and not no_diabetes_example:
        print(f'Features: {features}')
        print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}\n')
        no_diabetes_example = True

    # Break the loop if we have both examples
    if has_diabetes_example and no_diabetes_example:
        break

# In case there were no predictions for diabetes, let's force an example
if not has_diabetes_example:
    print("\nNo predictions for diabetes were found. Here's a forced example from the training data.\n")
    for i in range(len(X_train)):
        features = X_original_train.iloc[i].values  # Use original values for recommendation
        prediction = model.predict([X_train[i]])[0]
        if prediction == 1:
            print(f'Features: {features}')
            print(f'Prediction: {prediction}, {recommend_treatment(prediction, features)}\n')
            break

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Feature Importance
feature_importances = model.feature_importances_
features = columns[:-1]  # Exclude 'Outcome' column
importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

print("Feature Importances:")
print(importance_df)

# Plot feature importances
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df)
plt.title('Feature Importance for Predicting Diabetes')
plt.show()

# Correlation Analysis
correlation_matrix = data.corr()
print("\nCorrelation Matrix:")
print(correlation_matrix)

# Plot correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Descriptive Statistics
diabetic = data[data['Outcome'] == 1]
non_diabetic = data[data['Outcome'] == 0]

print("\nDescriptive Statistics for Diabetic Group:")
print(diabetic.describe())

print("\nDescriptive Statistics for Non-Diabetic Group:")
print(non_diabetic.describe())

# Visualizations
# Histograms
plt.figure(figsize=(15, 10))
for i, feature in enumerate(features):
    plt.subplot(3, 3, i + 1)
    sns.histplot(diabetic[feature], color='red', label='Diabetic', kde=True)
    sns.histplot(non_diabetic[feature], color='blue', label='Non-Diabetic', kde=True)
    plt.title(f'Distribution of {feature}')
    plt.legend()
plt.tight_layout()
plt.show()

# Box Plots
plt.figure(figsize=(15, 10))
for i, feature in enumerate(features):
    plt.subplot(3, 3, i + 1)
    sns.boxplot(x='Outcome', y=feature, data=data)
    plt.title(f'Box plot of {feature}')
plt.tight_layout()
plt.show()

# Scatter Plots
sns.pairplot(data, hue='Outcome', vars=features)
plt.show()

import numpy as np
import pandas as pd

# Load and preprocess the dataset (for demonstration)
# Replace this with your actual dataset loading and preprocessing steps
# For demonstration, we'll use a sample DataFrame
data = pd.DataFrame({
    'Pregnancies': [6, 1, 8, 1, 0],
    'Glucose': [148, 85, 183, 89, 137],
    'BloodPressure': [72, 66, 64, 66, 40],
    'SkinThickness': [35, 29, 23, 23, 35],
    'Insulin': [0, 0, 0, 94, 168],
    'BMI': [33.6, 26.6, 23.3, 28.1, 43.1],
    'DiabetesPedigreeFunction': [0.627, 0.351, 0.672, 0.167, 2.288],
    'Age': [50, 31, 32, 21, 33],
    'Outcome': [1, 0, 1, 0, 1]
})

# Dummy model fitting (for demonstration)
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

# Separate features and target
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train a model (Random Forest classifier for demonstration)
model = RandomForestClassifier(random_state=42)
model.fit(X_scaled, y)

# Define the recommendation function
def recommend_treatment(prediction, features):
    pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age = features

    if prediction == 1:
        if glucose > 180:
            return "Diagnosis: Diabetes. Recommended Treatment: Immediate consultation with a healthcare provider. Consider starting insulin therapy."
        elif bmi > 30:
            return "Diagnosis: Diabetes. Recommended Treatment: Consult a healthcare provider. Focus on a weight management plan along with medication."
        elif age > 50:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular check-ups and possibly medication tailored for older adults."
        elif blood_pressure > 80:
            return "Diagnosis: Diabetes. Recommended Treatment: Monitor blood pressure and consider medication to manage both diabetes and hypertension."
        else:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular monitoring of blood sugar levels and oral medications."
    else:
        if bmi > 30:
            return "Diagnosis: No Diabetes. Recommended Treatment: Maintain a healthy diet and regular exercise to manage weight and prevent diabetes."
        elif age > 50:
            return "Diagnosis: No Diabetes. Recommended Treatment: Regular check-ups to monitor and prevent the onset of diabetes."
        elif blood_pressure > 80:
            return "Diagnosis: No Diabetes. Recommended Treatment: Monitor blood pressure and maintain a healthy lifestyle to prevent diabetes."
        else:
            return "Diagnosis: No Diabetes. Recommended Treatment: Continue with a balanced diet and regular physical activity to stay healthy."

# Function to take user input and predict diabetes
def get_user_input_and_predict():
    print("Please enter the following details:")

    pregnancies = int(input("Number of Pregnancies: "))
    glucose = float(input("Glucose Level (mg/dL): "))
    blood_pressure = float(input("Blood Pressure (mm Hg): "))
    skin_thickness = float(input("Skin Thickness (mm): "))
    insulin = float(input("Insulin Level (uU/mL): "))
    bmi = float(input("Body Mass Index (BMI): "))
    diabetes_pedigree_function = float(input("Diabetes Pedigree Function: "))
    age = int(input("Age: "))

    # Scale the user input
    user_features = scaler.transform([[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age]])

    # Predict using the model
    prediction = model.predict(user_features)[0]

    # Get the recommendation
    recommendation = recommend_treatment(prediction, [pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age])

    # Print the result
    if prediction == 1:
        print("\nPrediction: Diabetes detected.")
    else:
        print("\nPrediction: No Diabetes detected.")

    print(recommendation)

# Call the function to start the interaction
get_user_input_and_predict()

import numpy as np
import pandas as pd

# Load and preprocess the dataset (for demonstration)
# Replace this with your actual dataset loading and preprocessing steps
# For demonstration, we'll use a sample DataFrame
data = pd.DataFrame({
    'Pregnancies': [6, 1, 8, 1, 0],
    'Glucose': [148, 85, 183, 89, 137],
    'BloodPressure': [72, 66, 64, 66, 40],
    'SkinThickness': [35, 29, 23, 23, 35],
    'Insulin': [0, 0, 0, 94, 168],
    'BMI': [33.6, 26.6, 23.3, 28.1, 43.1],
    'DiabetesPedigreeFunction': [0.627, 0.351, 0.672, 0.167, 2.288],
    'Age': [50, 31, 32, 21, 33],
    'Outcome': [1, 0, 1, 0, 1]
})

# Dummy model fitting (for demonstration)
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

# Separate features and target
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train a model (Random Forest classifier for demonstration)
model = RandomForestClassifier(random_state=42)
model.fit(X_scaled, y)

# Define the recommendation function
def recommend_treatment(prediction, features):
    pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age = features

    if prediction == 1:
        if glucose > 180:
            return "Diagnosis: Diabetes. Recommended Treatment: Immediate consultation with a healthcare provider. Consider starting insulin therapy."
        elif bmi > 30:
            return "Diagnosis: Diabetes. Recommended Treatment: Consult a healthcare provider. Focus on a weight management plan along with medication."
        elif age > 50:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular check-ups and possibly medication tailored for older adults."
        elif blood_pressure > 80:
            return "Diagnosis: Diabetes. Recommended Treatment: Monitor blood pressure and consider medication to manage both diabetes and hypertension."
        else:
            return "Diagnosis: Diabetes. Recommended Treatment: Regular monitoring of blood sugar levels and oral medications."
    else:
        if bmi > 30:
            return "Diagnosis: No Diabetes. Recommended Treatment: Maintain a healthy diet and regular exercise to manage weight and prevent diabetes."
        elif age > 50:
            return "Diagnosis: No Diabetes. Recommended Treatment: Regular check-ups to monitor and prevent the onset of diabetes."
        elif blood_pressure > 80:
            return "Diagnosis: No Diabetes. Recommended Treatment: Monitor blood pressure and maintain a healthy lifestyle to prevent diabetes."
        else:
            return "Diagnosis: No Diabetes. Recommended Treatment: Continue with a balanced diet and regular physical activity to stay healthy."

# Function to take user input and predict diabetes
def get_user_input_and_predict():
    print("Please enter the following details:")

    pregnancies = int(input("Number of Pregnancies: "))
    glucose = float(input("Glucose Level (mg/dL): "))
    blood_pressure = float(input("Blood Pressure (mm Hg): "))
    skin_thickness = float(input("Skin Thickness (mm): "))
    insulin = float(input("Insulin Level (uU/mL): "))
    bmi = float(input("Body Mass Index (BMI): "))
    diabetes_pedigree_function = float(input("Diabetes Pedigree Function: "))
    age = int(input("Age: "))

    # Scale the user input
    user_features = scaler.transform([[pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age]])

    # Predict using the model
    prediction = model.predict(user_features)[0]

    # Get the recommendation
    recommendation = recommend_treatment(prediction, [pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age])

    # Print the result
    if prediction == 1:
        print("\nPrediction: Diabetes detected.")
    else:
        print("\nPrediction: No Diabetes detected.")

    print(recommendation)

# Call the function to start the interaction
get_user_input_and_predict()